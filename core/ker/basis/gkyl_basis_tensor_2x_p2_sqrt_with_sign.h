GKYL_CU_DH static inline void 
tensor_2x_p2_sqrt_with_sign(const double *ASign, const double *A, double *ASqrt) 
{ 
  // ASign: Input DG field, used to get correct sign of Asqrt. 
  // A:     Input DG field. 
  // ASqrt: Output DG field (expansion of sqrt(A), with sign determined by Asign). 
 
  double AOrd[9] = {0.0}; 

  double temp = 0.0; 
  double temp_sign = 0.0; 
  temp = 0.4*A[8]-0.5999999999999995*A[7]-0.5999999999999999*A[6]+0.4472135954999579*(A[5]+A[4])+0.9*A[3]-0.6708203932499369*(A[2]+A[1])+0.5*A[0]; 
  temp_sign = 0.4*ASign[8]-0.5999999999999995*ASign[7]-0.5999999999999999*ASign[6]+0.4472135954999579*(ASign[5]+ASign[4])+0.9*ASign[3]-0.6708203932499369*(ASign[2]+ASign[1])+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[0] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[0] = -sqrt(temp); 
  } else { 
  AOrd[0] = sqrt(temp); 
  } 
  temp = (-0.5*A[8])+0.75*A[7]-0.5590169943749475*A[5]+0.4472135954999579*A[4]-0.6708203932499369*A[1]+0.5*A[0]; 
  temp_sign = (-0.5*ASign[8])+0.75*ASign[7]-0.5590169943749475*ASign[5]+0.4472135954999579*ASign[4]-0.6708203932499369*ASign[1]+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[1] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[1] = -sqrt(temp); 
  } else { 
  AOrd[1] = sqrt(temp); 
  } 
  temp = 0.4*A[8]-0.5999999999999995*A[7]+0.5999999999999999*A[6]+0.4472135954999579*(A[5]+A[4])-0.9*A[3]+0.6708203932499369*A[2]-0.6708203932499369*A[1]+0.5*A[0]; 
  temp_sign = 0.4*ASign[8]-0.5999999999999995*ASign[7]+0.5999999999999999*ASign[6]+0.4472135954999579*(ASign[5]+ASign[4])-0.9*ASign[3]+0.6708203932499369*ASign[2]-0.6708203932499369*ASign[1]+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[2] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[2] = -sqrt(temp); 
  } else { 
  AOrd[2] = sqrt(temp); 
  } 
  temp = (-0.5*A[8])+0.75*A[6]+0.4472135954999579*A[5]-0.5590169943749475*A[4]-0.6708203932499369*A[2]+0.5*A[0]; 
  temp_sign = (-0.5*ASign[8])+0.75*ASign[6]+0.4472135954999579*ASign[5]-0.5590169943749475*ASign[4]-0.6708203932499369*ASign[2]+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[3] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[3] = -sqrt(temp); 
  } else { 
  AOrd[3] = sqrt(temp); 
  } 
  temp = 0.625*A[8]-0.5590169943749475*(A[5]+A[4])+0.5*A[0]; 
  temp_sign = 0.625*ASign[8]-0.5590169943749475*(ASign[5]+ASign[4])+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[4] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[4] = -sqrt(temp); 
  } else { 
  AOrd[4] = sqrt(temp); 
  } 
  temp = (-0.5*A[8])-0.75*A[6]+0.4472135954999579*A[5]-0.5590169943749475*A[4]+0.6708203932499369*A[2]+0.5*A[0]; 
  temp_sign = (-0.5*ASign[8])-0.75*ASign[6]+0.4472135954999579*ASign[5]-0.5590169943749475*ASign[4]+0.6708203932499369*ASign[2]+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[5] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[5] = -sqrt(temp); 
  } else { 
  AOrd[5] = sqrt(temp); 
  } 
  temp = 0.4*A[8]+0.5999999999999995*A[7]-0.5999999999999999*A[6]+0.4472135954999579*(A[5]+A[4])-0.9*A[3]-0.6708203932499369*A[2]+0.6708203932499369*A[1]+0.5*A[0]; 
  temp_sign = 0.4*ASign[8]+0.5999999999999995*ASign[7]-0.5999999999999999*ASign[6]+0.4472135954999579*(ASign[5]+ASign[4])-0.9*ASign[3]-0.6708203932499369*ASign[2]+0.6708203932499369*ASign[1]+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[6] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[6] = -sqrt(temp); 
  } else { 
  AOrd[6] = sqrt(temp); 
  } 
  temp = (-0.5*A[8])-0.75*A[7]-0.5590169943749475*A[5]+0.4472135954999579*A[4]+0.6708203932499369*A[1]+0.5*A[0]; 
  temp_sign = (-0.5*ASign[8])-0.75*ASign[7]-0.5590169943749475*ASign[5]+0.4472135954999579*ASign[4]+0.6708203932499369*ASign[1]+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[7] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[7] = -sqrt(temp); 
  } else { 
  AOrd[7] = sqrt(temp); 
  } 
  temp = 0.4*A[8]+0.5999999999999995*A[7]+0.5999999999999999*A[6]+0.4472135954999579*(A[5]+A[4])+0.9*A[3]+0.6708203932499369*(A[2]+A[1])+0.5*A[0]; 
  temp_sign = 0.4*ASign[8]+0.5999999999999995*ASign[7]+0.5999999999999999*ASign[6]+0.4472135954999579*(ASign[5]+ASign[4])+0.9*ASign[3]+0.6708203932499369*(ASign[2]+ASign[1])+0.5*ASign[0]; 
  if (temp < 0.0) { 
  AOrd[8] = 0.0; 
  } else if (temp > 0.0 && temp_sign < 0.0) { 
  AOrd[8] = -sqrt(temp); 
  } else { 
  AOrd[8] = sqrt(temp); 
  } 
  ASqrt[0] = 0.154320987654321*AOrd[8]+0.2469135802469136*AOrd[7]+0.154320987654321*AOrd[6]+0.2469135802469136*AOrd[5]+0.3950617283950617*AOrd[4]+0.2469135802469136*AOrd[3]+0.154320987654321*AOrd[2]+0.2469135802469136*AOrd[1]+0.154320987654321*AOrd[0]; 
  ASqrt[1] = 0.2070433312499806*AOrd[8]+0.3312693299999688*AOrd[7]+0.2070433312499806*AOrd[6]-0.2070433312499806*AOrd[2]-0.3312693299999688*AOrd[1]-0.2070433312499806*AOrd[0]; 
  ASqrt[2] = 0.2070433312499806*AOrd[8]-0.2070433312499806*AOrd[6]+0.3312693299999688*AOrd[5]-0.3312693299999688*AOrd[3]+0.2070433312499806*AOrd[2]-0.2070433312499806*AOrd[0]; 
  ASqrt[3] = 0.2777777777777778*AOrd[8]-0.2777777777777778*AOrd[6]-0.2777777777777778*AOrd[2]+0.2777777777777778*AOrd[0]; 
  ASqrt[4] = 0.138028887499987*AOrd[8]+0.2208462199999792*AOrd[7]+0.138028887499987*AOrd[6]-0.2760577749999741*AOrd[5]-0.4416924399999584*AOrd[4]-0.2760577749999741*AOrd[3]+0.138028887499987*AOrd[2]+0.2208462199999792*AOrd[1]+0.138028887499987*AOrd[0]; 
  ASqrt[5] = 0.138028887499987*AOrd[8]-0.2760577749999741*AOrd[7]+0.138028887499987*AOrd[6]+0.2208462199999792*AOrd[5]-0.4416924399999584*AOrd[4]+0.2208462199999792*AOrd[3]+0.138028887499987*AOrd[2]-0.2760577749999741*AOrd[1]+0.138028887499987*AOrd[0]; 
  ASqrt[6] = 0.1851851851851853*AOrd[8]-0.1851851851851853*AOrd[6]-0.3703703703703705*AOrd[5]+0.3703703703703705*AOrd[3]+0.1851851851851853*AOrd[2]-0.1851851851851853*AOrd[0]; 
  ASqrt[7] = 0.1851851851851853*AOrd[8]-0.3703703703703705*AOrd[7]+0.1851851851851853*AOrd[6]-0.1851851851851853*AOrd[2]+0.3703703703703705*AOrd[1]-0.1851851851851853*AOrd[0]; 
  ASqrt[8] = 0.1234567901234568*AOrd[8]-0.2469135802469136*AOrd[7]+0.1234567901234568*AOrd[6]-0.2469135802469136*AOrd[5]+0.4938271604938271*AOrd[4]-0.2469135802469136*AOrd[3]+0.1234567901234568*AOrd[2]-0.2469135802469136*AOrd[1]+0.1234567901234568*AOrd[0]; 

} 
 
